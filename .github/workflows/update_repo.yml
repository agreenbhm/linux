name: Update Repo

permissions:
  contents: write
  
on:
  workflow_dispatch:
  workflow_call:

jobs:
  release:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest
      options: --user root

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: apt
        
    - name: Install dependencies
      run: |
        apt update
        apt install -y apt-utils curl jq unzip
      
    - name: Find Artifact
      id: find_artifact
      run: |
        echo '::set-output name=artifact_id::$(curl -s -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}"  -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/agreenbhm/linux/actions/artifacts?name=compiled_vf2_debs | jq .artifacts[0].id)'
      
    - name: Download Artifact
      run: |
        curl -L -o /tmp/artifact.zip -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/agreenbhm/linux/actions/artifacts/${{ steps.find_artifact.outputs.artifact_id }}/zip
    
    - name: Extract Artifact
      run: |
        cd /tmp/
        unzip artifact.zip
    
    - name: Replace repo .deb files
      run: |
        rm -f ./repo/pool/main/*.deb
        mv /tmp/*.deb ./repo/pool/main/
        
    - name: Create Packages and Release manifests
      run: | 
        cd ./repo
        apt-ftparchive packages pool/ | gzip -9 > dists/dev/main/binary-riscv64/Packages.gz
        cd ./dists/dev
        apt-ftparchive release . | grep -v ".*Release$" > Release
    
    - name: Generate release tag
      id: tag
      run: |
        echo "::set-output name=release_tag::$(basename /tmp/linux-image-* | cut -d'_' -f2)-$(date +'%Y.%m.%d_%H-%M')"

    - name: Display structure of downloaded files
      run: |
        cd /tmp/
        ls -R

    - name: Release
      id: release1
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body: Automated build of VisionFive 2 kernel .debs for Ubuntu.
        files: |
          /tmp/*.deb
          
    - name: Re-try Release
      id: release2
      if: ${{ failure() }}
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body: Automated build of VisionFive 2 kernel .debs for Ubuntu.
        files: |
          /tmp/*.deb

    - name: Re-try Release Final
      id: release3
      if: ${{ failure() }}
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body: Automated build of VisionFive 2 kernel .debs for Ubuntu.
        files: |
          /tmp/*.deb
          
    - name: Check for success
      if: ${{ failure() && (steps.release1.outcome == 'success' || steps.release2.outcome == 'success' || steps.release3.outcome == 'success') }}
      run: exit 0
